package hanoi.towers.data.pages

import hanoi.towers.data.pages.cheat.component.HanoiCheat
import hanoi.towers.data.pages.game.component.HanoiGame
import hanoi.towers.data.pages.solver.component.HanoiSolver
import lib.language.Lang
import lib.optics.Lensify
import lib.optics.ReadOnly
import lib.optics.ReadWrite
import lib.optics.lens.Lens

@Lensify data class Pages(
    @ReadWrite val hanoiSolver: HanoiSolver,
    @ReadWrite val hanoiGame: HanoiGame,
    @ReadWrite val hanoiCheat: HanoiCheat,
    @ReadOnly val texts: Lang,
)

/**
 * Autogenerated Lens.
 * Read and manipulate [Pages.hanoiSolver]
 */
@ReadWrite val hanoiSolver: Lens<Pages, HanoiSolver> by lazy {
    Lens(
        get = { whole -> whole.hanoiSolver },
        set = { part -> { whole -> whole.copy(hanoiSolver = part) } }
    )
}

/**
 * Autogenerated Lens.
 * Read and manipulate [Pages.hanoiGame]
 */
@ReadWrite val hanoiGame: Lens<Pages, HanoiGame> by lazy {
    Lens(
        get = { whole -> whole.hanoiGame },
        set = { part -> { whole -> whole.copy(hanoiGame = part) } }
    )
}

/**
 * Autogenerated Lens.
 * Read and manipulate [Pages.hanoiCheat]
 */
@ReadWrite val hanoiCheat: Lens<Pages, HanoiCheat> by lazy {
    Lens(
        get = { whole -> whole.hanoiCheat },
        set = { part -> { whole -> whole.copy(hanoiCheat = part) } }
    )
}

/**
 * Autogenerated ReadOnly Lens.
 * Read [Pages.texts]
 */
@ReadOnly val texts: Lens<Pages, Lang> by lazy {
    Lens(
        get = { whole -> whole.texts },
        set = { { it } }
    )
}
