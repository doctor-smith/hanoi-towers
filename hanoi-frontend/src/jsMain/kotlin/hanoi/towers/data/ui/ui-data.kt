package hanoi.towers.data.ui

import androidx.compose.runtime.Composable
import hanoi.towers.data.cookies.Cookies
import hanoi.towers.data.i18n.I18N
import hanoi.towers.data.pages.Pages
import lib.optics.Lensify
import lib.optics.ReadOnly
import lib.optics.ReadWrite
import lib.optics.lens.Lens
import org.jetbrains.compose.web.dom.ElementScope
import org.w3c.dom.HTMLElement

@Lensify data class UI(
    @ReadWrite val pages: Pages,
    @ReadWrite val cookies: Cookies,
    @ReadOnly val i18n: I18N,
    @ReadWrite val modals: Map<Int, @Composable ElementScope<HTMLElement>.() -> Unit>,
    @ReadWrite val error: String?
)

/**
 * Autogenerated Lens.
 * Read and manipulate [UI.pages]
 */
@ReadWrite val pages: Lens<UI, Pages> by lazy {
    Lens(
        get = { whole -> whole.pages },
        set = { part -> { whole -> whole.copy(pages = part) } }
    )
}

/**
 * Autogenerated Lens.
 * Read and manipulate [UI.cookies]
 */
@ReadWrite val cookies: Lens<UI, Cookies> by lazy {
    Lens(
        get = { whole -> whole.cookies },
        set = { part -> { whole -> whole.copy(cookies = part) } }
    )
}

/**
 * Autogenerated ReadOnly Lens.
 * Read [UI.i18n]
 */
@ReadOnly val i18n: Lens<UI, I18N> by lazy {
    Lens(
        get = { whole -> whole.i18n },
        set = { { it } }
    )
}

/**
 * Autogenerated Lens.
 * Read and manipulate [UI.modals]
 */
@ReadWrite val modals: Lens<UI, Map<Int, @Composable ElementScope<HTMLElement>.() -> Unit>> by lazy {
    Lens(
        get = { whole -> whole.modals },
        set = { part -> { whole -> whole.copy(modals = part) } }
    )
}

/**
 * Autogenerated Lens.
 * Read and manipulate [UI.error]
 */
@ReadWrite val error: Lens<UI, String?> by lazy {
    Lens(
        get = { whole -> whole.error },
        set = { part -> { whole -> whole.copy(error = part) } }
    )
}
